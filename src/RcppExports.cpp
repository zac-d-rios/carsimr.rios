// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// randWrapper
int randWrapper(const int n);
RcppExport SEXP _carsimr_rios_randWrapper(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(randWrapper(n));
    return rcpp_result_gen;
END_RCPP
}
// random_shuffle_cpp
Rcpp::IntegerVector random_shuffle_cpp(Rcpp::IntegerVector a);
RcppExport SEXP _carsimr_rios_random_shuffle_cpp(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(random_shuffle_cpp(a));
    return rcpp_result_gen;
END_RCPP
}
// initialize_grid_cpp
IntegerMatrix initialize_grid_cpp(float rho, IntegerVector dims, float prob_blue);
RcppExport SEXP _carsimr_rios_initialize_grid_cpp(SEXP rhoSEXP, SEXP dimsSEXP, SEXP prob_blueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< float >::type prob_blue(prob_blueSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_grid_cpp(rho, dims, prob_blue));
    return rcpp_result_gen;
END_RCPP
}
// move_blue_cpp
IntegerMatrix move_blue_cpp(IntegerMatrix t_grid);
RcppExport SEXP _carsimr_rios_move_blue_cpp(SEXP t_gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type t_grid(t_gridSEXP);
    rcpp_result_gen = Rcpp::wrap(move_blue_cpp(t_grid));
    return rcpp_result_gen;
END_RCPP
}
// move_red_cpp
IntegerMatrix move_red_cpp(IntegerMatrix t_grid);
RcppExport SEXP _carsimr_rios_move_red_cpp(SEXP t_gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type t_grid(t_gridSEXP);
    rcpp_result_gen = Rcpp::wrap(move_red_cpp(t_grid));
    return rcpp_result_gen;
END_RCPP
}
// move_cars_cpp
List move_cars_cpp(IntegerMatrix t_grid, int trials);
RcppExport SEXP _carsimr_rios_move_cars_cpp(SEXP t_gridSEXP, SEXP trialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type t_grid(t_gridSEXP);
    Rcpp::traits::input_parameter< int >::type trials(trialsSEXP);
    rcpp_result_gen = Rcpp::wrap(move_cars_cpp(t_grid, trials));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_carsimr_rios_randWrapper", (DL_FUNC) &_carsimr_rios_randWrapper, 1},
    {"_carsimr_rios_random_shuffle_cpp", (DL_FUNC) &_carsimr_rios_random_shuffle_cpp, 1},
    {"_carsimr_rios_initialize_grid_cpp", (DL_FUNC) &_carsimr_rios_initialize_grid_cpp, 3},
    {"_carsimr_rios_move_blue_cpp", (DL_FUNC) &_carsimr_rios_move_blue_cpp, 1},
    {"_carsimr_rios_move_red_cpp", (DL_FUNC) &_carsimr_rios_move_red_cpp, 1},
    {"_carsimr_rios_move_cars_cpp", (DL_FUNC) &_carsimr_rios_move_cars_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_carsimr_rios(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
